package com.gnomon.epsos.service;


import com.google.common.base.Charsets;
import com.google.common.io.Resources;
import com.itextpdf.html2pdf.ConverterProperties;
import com.itextpdf.html2pdf.HtmlConverter;
import com.itextpdf.html2pdf.attach.ITagWorker;
import com.itextpdf.html2pdf.attach.ProcessorContext;
import com.itextpdf.html2pdf.attach.impl.DefaultTagWorkerFactory;
import com.itextpdf.html2pdf.attach.impl.tags.DivTagWorker;
import com.itextpdf.html2pdf.css.CssConstants;
import com.itextpdf.html2pdf.css.apply.ICssApplier;
import com.itextpdf.html2pdf.css.apply.impl.BlockCssApplier;
import com.itextpdf.html2pdf.css.apply.impl.DefaultCssApplierFactory;
import com.itextpdf.html2pdf.html.TagConstants;
import com.itextpdf.html2pdf.html.node.IElementNode;
import com.itextpdf.html2pdf.resolver.font.DefaultFontProvider;
import com.itextpdf.kernel.events.Event;
import com.itextpdf.kernel.events.IEventHandler;
import com.itextpdf.kernel.events.PdfDocumentEvent;
import com.itextpdf.kernel.geom.PageSize;
import com.itextpdf.kernel.geom.Rectangle;
import com.itextpdf.kernel.pdf.*;
import com.itextpdf.kernel.pdf.canvas.PdfCanvas;
import com.itextpdf.kernel.pdf.xobject.PdfFormXObject;
import com.itextpdf.layout.Canvas;
import com.itextpdf.layout.element.Paragraph;
import com.itextpdf.layout.font.FontProvider;
import com.itextpdf.layout.property.TextAlignment;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.net.URL;

public class HtmlToPdfConverter {

    private static final Logger LOGGER = LoggerFactory.getLogger(EpsosHelperService.class);

    public static ByteArrayOutputStream createPdf(String html) throws IOException {
        ByteArrayOutputStream baos = null;
        html = replaceStylesheet(html);
        html = removeExternalStylesheetReferences(html);
        try {
            baos = new ByteArrayOutputStream();
            WriterProperties writerProperties = new WriterProperties();
            //Add metadata
            writerProperties.addXmpMetadata();
            PdfWriter pdfWriter = new PdfWriter(baos, writerProperties);

            PdfDocument pdfDoc = new PdfDocument(pdfWriter);
            PageSize pageSize = PageSize.A4;
            pdfDoc.setDefaultPageSize(pageSize);
            pdfDoc.getCatalog().setLang(new PdfString("en-US"));
            //Set the document to be tagged
            pdfDoc.setTagged();
            PdfViewerPreferences pdfViewerPreferences = new PdfViewerPreferences();
            pdfViewerPreferences.setDisplayDocTitle(true);
            pdfDoc.getCatalog().setViewerPreferences(pdfViewerPreferences);

            //Create event-handlers
            String header = "Â© 2019 Generated by OpenNCP Portal";
            Header headerHandler = new Header(header);
            PageXofY footerHandler = new PageXofY(pdfDoc);

            //Assign event-handlers
            pdfDoc.addEventHandler(PdfDocumentEvent.START_PAGE,headerHandler);
            pdfDoc.addEventHandler(PdfDocumentEvent.END_PAGE,footerHandler);

            // pdf conversion
            ConverterProperties props = new ConverterProperties();
            FontProvider dfp = new DefaultFontProvider(true, true, false);

            /* Temporary fix for display issue with blocks (in current html2pdf version (2.0.1) */
            props.setTagWorkerFactory(new LabelBlockTagWorkerFactory());
            props.setCssApplierFactory(new LabelBlockCssApplierFactory());
            props.setFontProvider(dfp);

            HtmlConverter.convertToDocument(html, pdfDoc, props);
            footerHandler.writeTotal(pdfDoc);
            pdfDoc.close();
        } catch (Exception e) {
            LOGGER.error("Error occurred when converting HTML to PDF", e);
        }
        return baos;
    }

    private static String replaceStylesheet(String html) throws IOException {
        URL url = Resources.getResource("css/pdfstyle.css");
        String css = Resources.toString(url, Charsets.UTF_8);
        return html.replaceFirst("(?s)<style[^>]*>.*?</style>",
                "<style type=\"text/css\">" + css + "</style>");
    }

    private static String removeExternalStylesheetReferences(String html) throws IOException {
        return html.replaceAll("(?s)<link rel=\"stylesheet\" href=\"http[^>]*>.*?>\r?\n",
                "");
    }

    //Header event handler
    protected static class Header implements IEventHandler {
        String header;
        public Header(String header) {
            this.header = header;
        }
        @Override
        public void handleEvent(Event event) {
            //Retrieve document and
            PdfDocumentEvent docEvent = (PdfDocumentEvent) event;
            PdfDocument pdf = docEvent.getDocument();
            PdfPage page = docEvent.getPage();
            Rectangle pageSize = page.getPageSize();
            PdfCanvas pdfCanvas = new PdfCanvas(
                    page.getLastContentStream(), page.getResources(), pdf);
            Canvas canvas = new Canvas(pdfCanvas, pdf, pageSize);
            canvas.setFontSize(8f);
            //Write text at position
            canvas.showTextAligned(header,
                    pageSize.getWidth() - 100,
                    pageSize.getTop() - 30, TextAlignment.CENTER);
        }
    }

    //page X of Y
    protected static class PageXofY implements IEventHandler {
        PdfFormXObject placeholder;
        float side = 20;
        float x = 300;
        protected float y = 25;
        protected float space = 3f;
        float descent = 2;
        PageXofY(PdfDocument pdf) {
            placeholder =
                    new PdfFormXObject(new Rectangle(0, 0, side, side));
        }
        @Override
        public void handleEvent(Event event) {
            PdfDocumentEvent docEvent = (PdfDocumentEvent) event;
            PdfDocument pdf = docEvent.getDocument();
            PdfPage page = docEvent.getPage();
            int pageNumber = pdf.getPageNumber(page);
            Rectangle pageSize = page.getPageSize();
            PdfCanvas pdfCanvas = new PdfCanvas(
                    page.getLastContentStream(), page.getResources(), pdf);
            Canvas canvas = new Canvas(pdfCanvas, pdf, pageSize);
            canvas.setFontSize(8f);
            Paragraph p = new Paragraph()
                    .add("Page ").add(String.valueOf(pageNumber)).add(" of");
            canvas.showTextAligned(p, x, y, TextAlignment.RIGHT);
            pdfCanvas.addXObject(placeholder, x + space, y - descent);
            pdfCanvas.release();
        }
        void writeTotal(PdfDocument pdf) {
            Canvas canvas = new Canvas(placeholder, pdf);
            canvas.setFontSize(8f);
            canvas.showTextAligned(String.valueOf(pdf.getNumberOfPages()),
                    0, descent, TextAlignment.LEFT);
        }
    }

    /* Temporary fix for display issue with blocks (in current html2pdf version (2.0.1) */
    private static class LabelBlockTagWorkerFactory extends DefaultTagWorkerFactory {
        @Override
        public ITagWorker getCustomTagWorker(IElementNode tag, ProcessorContext context) {
            if (!TagConstants.LABEL.equals(tag.name())) {
                return null;
            }
            String display;
            if (tag.getStyles() == null || (display = tag.getStyles().get(CssConstants.DISPLAY)) == null) {
                return null;
            }
            if (CssConstants.BLOCK.equals(display)) {
                return new DivTagWorker(tag, context);
            }
            return null;
        }
    }

    /* Temporary fix for display issue with blocks (in current html2pdf version (2.0.1) */
    private static class LabelBlockCssApplierFactory extends DefaultCssApplierFactory {
        @Override
        public ICssApplier getCustomCssApplier(IElementNode tag) {
            if (!TagConstants.LABEL.equals(tag.name())) {
                return null;
            }
            String display;
            if (tag.getStyles() == null || (display = tag.getStyles().get(CssConstants.DISPLAY)) == null) {
                return null;
            }
            if (CssConstants.BLOCK.equals(display)) {
                return new BlockCssApplier();
            }
            return null;
        }
    }
}